A51 MACRO ASSEMBLER  LAB                                                                  08/20/2015 15:32:51 PAGE     1


MACRO ASSEMBLER A51 V8.02c
OBJECT MODULE PLACED IN .\Objects\lab.obj
ASSEMBLER INVOKED BY: C:\Keil_v5\C51\BIN\A51.EXE lab.asm SET(SMALL) DEBUG PRINT(.\Listings\lab.lst) OBJECT(.\Objects\lab
                      .obj) EP

LOC  OBJ            LINE     SOURCE

                       1     ;======================MAIN====================
0000                   2     ORG 0H
0000 0200D4            3     ljmp main
                       4     
0003                   5     delay:
                       6             USING 0
0003 C000              7             PUSH AR0 ;-- pushing the registers which are going to be
0005 C001              8             PUSH AR1 ;-- used by this subroutine
0007 C002              9             PUSH AR2
0009 E54F             10             MOV A, 4FH ;-- Move the value of D from 4FH to A
000B 75F00A           11             MOV B, #10 ;-- Load 10 in B
000E A4               12             MUL AB     ;-- Multiply 10 with D to get the number of iterations for the 50ms loop
000F F8               13             MOV R0, A  ;-- Move the result to R0 which is used as the iterator in the loop
0010                  14             BACK1:
                      15                     ;-- the following is a nested loop which generates a
                      16                     ;-- delay of 50ms. This delay has been iterated 10D
                      17                     ;-- times to get a total delay of 500Dms = D/2 seconds
0010 7AC8             18                     MOV R2,#200
0012                  19                     BACK2:
0012 79FF             20                             MOV R1,#0FFH
0014                  21                             BACK3:
0014 D9FE             22                                     DJNZ R1, BACK3
0016 DAFA             23                             DJNZ R2, BACK2
0018 D8F6             24                     DJNZ R0, BACK1
001A D002             25             POP AR2 ;-- popping the register in the exact reverse order before
001C D001             26             POP AR1 ;-- exiting from the subroutine
001E D000             27             POP AR0
0020 22               28             RET
                      29     
0021                  30     readNibble :
0021 C000             31             push ar0 ;-- pushing the registers being used in this program
                      32             ; Routine to read a nibble and confirm from user
                      33             ; First configure switches as input and LED’s as Output.
                      34             ; To configure port as Output clear it
                      35             ; To configure port as input, set it.
                      36             ; Logic to read a 4 bit number (nibble) and get confirmation from user
0023                  37             loop:
                      38                     ;turn on all 4 leds (routine is ready to accept input)
0023 7590FF           39                     mov p1, #0ffh
                      40                     ;wait for 5 sec during which user can give input through switches
0026 754F0A           41                     mov 4fh, #10 ;-- moving 10 to 4FH to generate a delay of 5 seconds from LCA
                             LL
0029 120003           42                     lcall delay
                      43                     ;turn off all LEDS
002C 75900F           44                     mov p1, #0fh
                      45                     ;read the input from switches (nibble)
002F A890             46                     mov r0, p1 ;-- P1 is saved in R0
                      47                     ;wait for one sec
0031 754F02           48                     mov 4fh, #2
0034 120003           49                     lcall delay
                      50                     ;show the read value on LEDs
0037 E8               51                     mov a, r0 ;-- moving the read value from R0 to ACC
0038 C4               52                     swap a
0039 440F             53                     orl a, #0fh
003B F590             54                     mov p1, a
                      55                     ;wait for 5 sec ( during this time delay User can put all switches to OFF
                      56                     ;2position to signal that the read value is correct and routine can proceed
A51 MACRO ASSEMBLER  LAB                                                                  08/20/2015 15:32:51 PAGE     2

                              to
                      57                     ;next step)
003D 754F0A           58                     mov 4fh, #10
0040 120003           59                     lcall delay
                      60                     ;clear leds
0043 75900F           61                     mov p1, #0fh
                      62                     ;read the input from switches
0046 E590             63                     mov a, p1
                      64                     ;if read value <> 0Fh go to loop
0048 B40FD8           65                     cjne a, #0fh, loop
                      66             ; return to caller with previously read nibble in location 4EH (lower 4 bits).
004B 884E             67             mov 4eh, r0 ;-- moving the previously read nibble to lower bits of 4EH
004D D000             68             pop ar0 ;-- popping the registers before returning
004F 22               69             ret
                      70     
0050                  71     packNibble:
0050 C000             72             push ar0 ;-- push the registers being used in this program
0052 120021           73             lcall readnibble ;-- call readNibble to read the 4 bits and store it in lower 4 bit
                             s of 4EH
0055 E54E             74             mov a, 4eh ;-- move the read value from 4EH to ACC
0057 C4               75             swap a ;-- swapping ACC as the 4 bits read are the higher 4 bits of the byte to be 
                             read
0058 54F0             76             anl a, #0f0h ;-- ensuring that the value in the ACC has lower 4 bits as zeroes
005A F8               77             mov r0, a ;-- moving ACC to R0 as the next call to readNibble might alter ACC
005B 120021           78             lcall readnibble ;-- call readNibble to read the 4 bits and store it in lower 4 bit
                             s of 4EH
005E E54E             79             mov a, 4eh ;-- move the read value from 4EH to ACC
0060 540F             80             anl a, #0fh ;-- ensuring that the value in the ACC has higher 4 bits as zeroes
0062 4200             81             orl 0, a ;- R0 = R0|ACC, since R0 had upper 4 bits only and ACC had lower 4 bits
0064 884F             82             mov 4fh, r0 ;-- finally moving the whole byte read from R0 to 4FH
0066 D000             83             pop ar0 ;-- popping the registers before returning
0068 22               84             ret
                      85     
0069                  86     readValues:
0069 C000             87             push ar0 ;-- pushing the registers being used in this program
006B C001             88             push ar1
006D A850             89             mov r0, 50h ;-- R0 = number of bytes to be read
006F A951             90             mov r1, 51h ;-- R1 = starting address from where the read bytes need to be stored
0071                  91             loop_readValues:
0071 120050           92                     lcall packNibble ;-- packnibble will read and store 1 byte in 4FH
0074 A74F             93                     mov @r1, 4fh ;-- moving the read byte from 4FH to the required address
0076 09               94                     inc r1 ;-- R1 = R1 + 1
0077 D8F8             95                     djnz r0, loop_readValues
0079 D001             96             pop ar1 ;-- popping the registers before returning
007B D000             97             pop ar0
007D 22               98             ret
                      99     
007E                 100     shuffleBits:
                     101             using 0
007E C000            102             push ar0 ;-- pushing the registers being used in this program
0080 C001            103             push ar1
0082 C002            104             push ar2
0084 AA50            105             mov r2, 50h ;-- R2 = the value of K i.e. the number of elements in the array
0086 A851            106             mov r0, 51h ;-- R0 = pointer to the first array starting
0088 A952            107             mov r1, 52h ;-- R1 = pointer to the second array starting
008A 1A              108             dec r2 ;-- the loop runs only till K-1 since the Kth case needs to handled separate
                             ly
008B                 109             loop_shuffle:
008B E6              110                     mov a, @r0 ;-- ACC = @R0
008C 08              111                     inc r0 ;-- R0 = R0 + 1
008D 66              112                     xrl a, @r0 ;-- ACC = ACC^@R0
008E F7              113                     mov @r1, a ;-- @R1 = ACC
008F 09              114                     inc r1 ;-- R1 = R1 + 1
0090 DAF9            115                     djnz r2, loop_shuffle
0092 E6              116             mov a, @r0 ;-- ACC = A[K-1]
0093 A851            117             mov r0, 51h ;-- R0 = the starting address of the array A
A51 MACRO ASSEMBLER  LAB                                                                  08/20/2015 15:32:51 PAGE     3

0095 66              118             xrl a, @r0 ;-- ACC = ACC^A[0]
0096 F7              119             mov @r1, a ;-- moving ACC to the specified location
0097 D002            120             pop ar2 ;-- popping the registers before returning
0099 D001            121             pop ar1
009B D000            122             pop ar0
009D 22              123             ret
                     124     
009E                 125     displayValues:
009E C000            126             push ar0 ;-- pushing the registers being used in this program
00A0 C001            127             push ar1
00A2 C002            128             push ar2
00A4 C003            129             push ar3
00A6                 130             next:
00A6 E550            131                     mov a, 50h ;-- ACC = the value of k
00A8 A951            132                     mov r1, 51h ;-- r1 = address of the first location
00AA 75900F          133                     mov p1, #0fh ;-- set the internal latches of the lower nibble high to read 
                             P1
00AD A890            134                     mov r0, p1 ;-- reading P1 and storing in R0
00AF AA90            135                     mov r2, p1 ;-- r2 = the value read from port
00B1 C3              136                     clr c ;-- clear carry as the next instruction is subtract
00B2 98              137                     subb a, r0 ;-- subtract R0 from ACC
00B3 40F1            138                     jc next ;-- if carry is set then, input from port > K, jump to displayValue
                             s
00B5 EA              139                     mov a, r2 ;-- else move the address of the first byte to ACC
00B6 29              140                     add a, r1 ;-- add the value read from the port
00B7 F9              141                     mov r1, a ;-- move the result of addition to R1
00B8 19              142                     dec r1 ;-- decrement R1 to get to the actual location of the required byte
00B9 E7              143                     mov a, @r1 ;-- move the byte to be displayed to ACC
00BA F590            144                     mov p1, a ;-- move the value from ACC to P1
00BC C4              145                     swap a ;-- swap ACC to get the lower nibble from A4 to A7
00BD FB              146                     mov r3, a ;-- move ACC to R3 since ACC might get modified in the delay subr
                             outine
00BE 754F04          147                     mov 4fh, #4 ;-- moving #4 in 4fh as delay of 2 seconds is needed
00C1 120003          148                     lcall delay ;-- delay of 2 seconds
00C4 8B90            149                     mov p1, r3 ;-- display the lower nibble
00C6 120003          150                     lcall delay
00C9 80DB            151                     jmp next ;-- jump back to the start of the subroutine to display continuous
                             ly
00CB D003            152             pop ar3 ;-- popping the registers before returning
00CD D002            153             pop ar2
00CF D001            154             pop ar1
00D1 D000            155             pop ar0
00D3 22              156             ret
                     157     
00D4                 158     MAIN:
00D4 7581CF          159             MOV SP,#0CFH;-----------------------Initialize STACK POINTER
00D7 755002          160             MOV 50H,#2;------------------------Set value of K
00DA 755160          161             MOV 51H,#60H;------------------------Array A start location
00DD 754F00          162             MOV 4FH,#00H;------------------------Clear location 4FH
00E0 120069          163             LCALL readValues
                     164             
00E3 755002          165             MOV 50H,#2;------------------------Value of K
00E6 755160          166             MOV 51H,#60H;------------------------Array A start location
00E9 755270          167             MOV 52H,#70H;------------------------Array B start location
00EC 12007E          168             LCALL shuffleBits
                     169             
00EF 755002          170             MOV 50H,#2;------------------------Value of K
00F2 755170          171             MOV 51H,#70H;------------------------Array B start Location
00F5 12009E          172             LCALL displayValues;----------------Display the last four bits of elements on LEDs
                     173             
00F8 80FE            174     here:SJMP here;---------------------WHILE loop(Infinite Loop)
                     175     END
                             ; ------------------------------------END MAIN------------------------------------
A51 MACRO ASSEMBLER  LAB                                                                  08/20/2015 15:32:51 PAGE     4

SYMBOL TABLE LISTING
------ ----- -------


N A M E             T Y P E  V A L U E   ATTRIBUTES

AR0. . . . . . . .  D ADDR   0000H   A   
AR1. . . . . . . .  D ADDR   0001H   A   
AR2. . . . . . . .  D ADDR   0002H   A   
AR3. . . . . . . .  D ADDR   0003H   A   
B. . . . . . . . .  D ADDR   00F0H   A   
BACK1. . . . . . .  C ADDR   0010H   A   
BACK2. . . . . . .  C ADDR   0012H   A   
BACK3. . . . . . .  C ADDR   0014H   A   
DELAY. . . . . . .  C ADDR   0003H   A   
DISPLAYVALUES. . .  C ADDR   009EH   A   
HERE . . . . . . .  C ADDR   00F8H   A   
LOOP . . . . . . .  C ADDR   0023H   A   
LOOP_READVALUES. .  C ADDR   0071H   A   
LOOP_SHUFFLE . . .  C ADDR   008BH   A   
MAIN . . . . . . .  C ADDR   00D4H   A   
NEXT . . . . . . .  C ADDR   00A6H   A   
P1 . . . . . . . .  D ADDR   0090H   A   
PACKNIBBLE . . . .  C ADDR   0050H   A   
READNIBBLE . . . .  C ADDR   0021H   A   
READVALUES . . . .  C ADDR   0069H   A   
SHUFFLEBITS. . . .  C ADDR   007EH   A   
SP . . . . . . . .  D ADDR   0081H   A   


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
